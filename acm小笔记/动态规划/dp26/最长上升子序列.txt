二分查找算法：
#include<cstdio>
#include<algorithm>
const int MAXN=200001;

int a[MAXN];
int d[MAXN];

int main()
{
    int n;
    scanf("%d",&n);
    for(int i=1;i<=n;i++)
        scanf("%d",&a[i]);
    d[1]=a[1];
    int len=1;
    for(int i=2;i<=n;i++)
    {
        if(a[i]>d[len])
            d[++len]=a[i];
        else
        {
            int j=std::lower_bound(d+1,d+len+1,a[i])-d;
            d[j]=a[i]; 
        }
    }
    printf("%d\n",len);    
    return 0;
}

朴素算法：
for(int i=0;i<s;i++)
	

	for(int j=0;j<i;j++)
	
	{
	
		if(mice[j].w>mice[i].w&&mice[j].v<mice[i].v)
	
		{
	
			if(dp[i]<dp[j]+1)
	
			{
	
				dp[i]=dp[j]+1;
	
				pre[i]=j;
	
			}
	
		}
	
	}

	int ans=0;

	int p;

	for(int i=0;i<s;i++)
	{
	
	if(dp[i]>ans)
		{
	
		ans=dp[i];
	
		p=i;
	
	}	
	
	}

	printf("%d\n",dp[p]);

	while(p!=-1)
	{
	
	printf("%d\n",mice[p].id);
	
	p=pre[p];
	
}

